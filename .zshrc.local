# Specify the default text editor (also change `sensible-editor`)
export EDITOR="nvim"

# Press `Q`: change to ranger’s directory on quit
# https://github.com/ranger/ranger/wiki/Integration-with-other-programs#allow-deciding-whether-your-shell-should-change-to-rangers-directory-on-quit
function ranger {
    local IFS=$'\t\n'
    local tempfile="$(mktemp -t tmp.XXXXXX)"
    local ranger_cmd=(
        command
        ranger
        --cmd="map Q chain shell echo %d > "$tempfile"; quitall"
    )

    ${ranger_cmd[@]} "$@"
    if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]]; then
        cd -- "$(cat "$tempfile")" || return
    fi
    command rm -f -- "$tempfile" 2>/dev/null
}


# Aliases
alias aria2="(aria2c --enable-rpc --rpc-listen-all >> /tmp/aria2.log 2>&1 &)"
alias ra="ranger"
alias diff="diff --color"
alias cs=". $HOME/.local/bin/conda-switch.sh"
alias ls="lsd"
alias la="lsd -a"
alias lt="lsd --tree"
alias llt="lsd -t"
alias lls="lsd -S"
alias vi="nvim"
alias em="emacs -nw"
alias bt="bluetuith"
alias ncm="ncmpcpp"

type batcat > /dev/null && alias bat="batcat"
type bat > /dev/null && alias cat="bat"

# Path to Dotfiles.git
DOT_REPO="$HOME/Projects/Dotfiles.git"

# To interact with the Dotfiles.git repo
alias dit="git --git-dir=$DOT_REPO --work-tree=$HOME"

# Retrieve the directories that contain the dotfiles into $DOT_DIRS
export DOT_DIRS="$HOME"
for _FILE in $(dit ls-files | grep \/); do
    _DIR="$HOME/${_FILE%/*}"  # Get the directory of the file
    [[ ":$DOT_DIRS:" =~ ":$_DIR:" ]] || DOT_DIRS="$DOT_DIRS:$_DIR"
done

# Setup the repository location of Dotfiles.git when you are in $DOT_DIRS
# PROS: Show the git info in the prompt; Get rid of the annoying options
# CONS: Can't run `git clone`
function precmd {  # Executed before each prompt
    if [[ ":$DOT_DIRS:" =~ ":$PWD:" ]]; then
        export GIT_DIR="$DOT_REPO"
        export GIT_WORK_TREE="$HOME"
    else
        unset GIT_DIR
        unset GIT_WORK_TREE
    fi
}

# Remove the $GIT_DIR and $GIT_WORK_TREE that conflict with the `git clone`
alias yay="env -u GIT_DIR -u GIT_WORK_TREE yay"

# Fallback to the vanilla lazygit if GIT_DIR is unset
alias lg='lazygit --git-dir=$GIT_DIR --work-tree=$GIT_WORK_TREE'

# git-fuzzy
export PATH="$HOME/Projects/git-fuzzy/bin:$PATH"
export GF_VERTICAL_THRESHOLD="10"
export GF_VERTICAL_PREVIEW_PERCENT_CALCULATION="70"
alias gf="git fuzzy"

# Setup the proxy
function proxy {
    if [ "$1" = "off" ]; then
        unset http{s,}_proxy all_proxy no_proxy
    else
        IP=${1:-"127.0.0.1"}
        PORT=${2:-"11123"}
        export http{s,}_proxy=http://"$IP":"$PORT"
        export all_proxy=socks5://"$IP":"$PORT"
        export no_proxy="localhost,$IP"
        env | grep "_proxy"
    fi
}


# Weird empty folder in $HOME
# [ -d "$HOME/模板/" ] && rmdir "$HOME/模板/"


# Load conda on demand (conda will cause a slowdown in zsh initialization)
function conda {
    if [[ ! "miniconda3/bin" =~ $PATH ]]; then
        # >>> conda initialize >>>
        # !! Contents within this block are managed by 'conda init' !!
        __conda_setup="$('$HOME/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
        if [ $? -eq 0 ]; then
            eval "$__conda_setup"
        else
            if [ -f "$HOME/miniconda3/etc/profile.d/conda.sh" ]; then
                . "$HOME/miniconda3/etc/profile.d/conda.sh"
            else
                export PATH="$HOME/miniconda3/bin:$PATH"
            fi
        fi
        unset __conda_setup
        # <<< conda initialize <<<
    fi
    conda "$@"
}


# fzf
FZF_COMPLETION_TRIGGER='\'


# Completion options

# Show dotfiles in completion
_comp_options+=(globdots)

# Ignore . and .. in completion
zstyle ':completion:*' special-dirs false


# Plugins without Oh-My-Zsh
if [ -z "$ZSH" ]; then
    # oh-my-zsh will import these plugins and scripts automatically
    PLUGIN_HOME="$HOME/.oh-my-zsh/custom/plugins"
    SCRIPT_HOME="$HOME/.oh-my-zsh/custom"

    # fzf
    source /usr/share/doc/fzf/examples/key-bindings.zsh
    source /usr/share/doc/fzf/examples/completion.zsh

    source $PLUGIN_HOME/fzf-tab/fzf-tab.plugin.zsh

    {
        # xsource() of grml will append some positional arguments:
        # ".zshrc.local" "..." (i.e. filename) which needs to be removed, or
        # fzf-git.sh will breakdown.
        args="$@" && shift "${#argv}"

        # wget https://raw.githubusercontent.com/junegunn/fzf-git.sh/main/fzf-git.sh -O ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/fzf-git.zsh
        source $SCRIPT_HOME/fzf-git.zsh

        # restore the arguments
        [ -n "$args" ] && set -- "$args" && unset args
    }

    # fish-like
    source $PLUGIN_HOME/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh
    source $PLUGIN_HOME/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh
fi


# Fix the weird pasting highlight of fast-syntax-highlighting
zle_highlight=('paste:none')


# Prompt
if [ -n "$grml_prompt_token_default" ]; then
    grml_prompt_token_default[dollar]='$ '
    zstyle ':prompt:grml:left:setup' items newline change-root user at host path vcs time rc newline dollar
    zstyle ':prompt:grml:*:items:at' token ' @ '  # Add spaces around '@'
fi


# npm
export PATH="$HOME/.npm-packages/bin:$PATH"


# Homebrew
export PATH="$PATH:/home/linuxbrew/.linuxbrew/bin"
export HOMEBREW_API_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api"
export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles"
export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git"
export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git"
export HOMEBREW_PIP_INDEX_URL="https://pypi.tuna.tsinghua.edu.cn/simple"


# Zoxide
eval "$(zoxide init zsh)"


# Pokemon
# type pokemon-colorscripts > /dev/null && pokemon-colorscripts -r --no-title || true

# Taskwarrior
# type task > /dev/null && task next
